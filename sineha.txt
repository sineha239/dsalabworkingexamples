DSA ASSIGNMENT 
NAME SINEHA DARSHAN TALREJA
CS231237

Q1

import java.util.*;

public class GraphTasks {

       static class Graph {
        private int vertices; // Number of vertices
        private List<List<Integer>> adjacencyList; // Adjacency list

              Graph(int vertices) {
            this.vertices = vertices;
            adjacencyList = new ArrayList<>();
            for (int i = 0; i < vertices; i++) {
                adjacencyList.add(new ArrayList<>());
            }
        }

              void addEdgeUndirected(int src, int dest) {
            adjacencyList.get(src).add(dest);
            adjacencyList.get(dest).add(src);
        }

               void addEdgeDirected(int src, int dest) {
            adjacencyList.get(src).add(dest);
        }

               void calculateDegree() {
            System.out.println("Degree of each node:");
            for (int i = 0; i < vertices; i++) {
                System.out.println("Node " + i + ": " + adjacencyList.get(i).size());
            }
        }

                void breadthFirstTraversal(int start) {
            boolean[] visited = new boolean[vertices];
            Queue<Integer> queue = new LinkedList<>();
            queue.add(start);
            visited[start] = true;

            System.out.println("Breadth First Traversal:");
            while (!queue.isEmpty()) {
                int node = queue.poll();
                System.out.print(node + " ");

                for (int neighbor : adjacencyList.get(node)) {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        queue.add(neighbor);
                    }
                }
            }
            System.out.println();
        }

                void depthFirstTraversal(int start) {
            boolean[] visited = new boolean[vertices];
            System.out.println("Depth First Traversal:");
            depthFirstTraversalUtil(start, visited);
            System.out.println();
        }

        
        private void depthFirstTraversalUtil(int node, boolean[] visited) {
            visited[node] = true;
            System.out.print(node + " ");

            for (int neighbor : adjacencyList.get(node)) {
                if (!visited[neighbor]) {
                    depthFirstTraversalUtil(neighbor, visited);
                }
            }
        }
    }
    public static void main(String[] args) 
        Graph undirectedGraph = new Graph(5);
        undirectedGraph.addEdgeUndirected(0, 1);
        undirectedGraph.addEdgeUndirected(0, 2);
        undirectedGraph.addEdgeUndirected(1, 2);
        undirectedGraph.addEdgeUndirected(1, 3);
        undirectedGraph.addEdgeUndirected(3, 4);
        undirectedGraph.calculateDegree();
        Graph directedGraph = new Graph(5);
        directedGraph.addEdgeDirected(0, 1);
        directedGraph.addEdgeDirected(0, 2);
        directedGraph.addEdgeDirected(1, 3);
        directedGraph.addEdgeDirected(2, 3);
        directedGraph.addEdgeDirected(3, 4);

        directedGraph.breadthFirstTraversal(0);
        directedGraph.depthFirstTraversal(0);
    }
}

NAME SINEHA DARSHAN TALREJA
CS231237
DSA LAB

Q1)
import java.util.Arrays;

public class ArrayOperations {
    public static int[] initializeArray(int size) {
        return new int[size];
    }

    public static int[] addToArray(int[] array, int value, int index) {
        if (index < 0 || index > array.length) {
            throw new ArrayIndexOutOfBoundsException("Invalid index");
        }
        int[] newArray = new int[array.length + 1];
        for (int i = 0, j = 0; i < newArray.length; i++) {
            if (i == index) {
                newArray[i] = value;
            } else {
                newArray[i] = array[j++];
            }
        }
        return newArray;
    }

    public static void editArray(int[] array, int index, int newValue) {
        if (index < 0 || index >= array.length) {
            throw new ArrayIndexOutOfBoundsException("Invalid index");
        }
        array[index] = newValue;
    }

    public static int[] deleteFromArray(int[] array, int index) {
        if (index < 0 || index >= array.length) {
            throw new ArrayIndexOutOfBoundsException("Invalid index");
        }
        int[] newArray = new int[array.length - 1];
        for (int i = 0, j = 0; i < array.length; i++) {
            if (i != index) {
                newArray[j++] = array[i];
            }
        }
        return newArray;
    }
    public static void reverseArray(int[] array) {
        int left = 0, right = array.length - 1;
        while (left < right) {
            int temp = array[left];
            array[left] = array[right];
            array[right] = temp;
            left++;
            right--;
        }
    }
    public static int findMinValue(int[] array) {
        int min = array[0];
        for (int num : array) {
            if (num < min) {
                min = num;
            }
        }
        return min;
    }
    public static int findSecondMax(int[] array) {
        int max = Integer.MIN_VALUE, secondMax = Integer.MIN_VALUE;
        for (int num : array) {
            if (num > max) {
                secondMax = max;
                max = num;
            } else if (num > secondMax && num != max) {
                secondMax = num;
            }
        }
        return secondMax;
    }
    public static void moveZeroesToEnd(int[] array) {
        int index = 0;
        for (int num : array) {
            if (num != 0) {
                array[index++] = num;
            }
        }
        while (index < array.length) {
            array[index++] = 0;
        }
    }
    public static int[] resizeArray(int[] array, int newSize) {
        return Arrays.copyOf(array, newSize);
    }

    public static int findMissingNumber(int[] array, int n) {
        int expectedSum = n * (n + 1) / 2;
        int actualSum = 0;
        for (int num : array) {
            actualSum += num;
        }
        return expectedSum - actualSum;
    }
    public static boolean isPalindrome(String str) {
        int left = 0, right = str.length() - 1;
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
    public static int binarySearch(int[] array, int target) {
        int left = 0, right = array.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (array[mid] == target) {
                return mid;
            } else if (array[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return -1; // Not found
    }

    public static int[] insertInSortedArray(int[] array, int value) {
        int[] newArray = new int[array.length + 1];
        int i = 0;
        while (i < array.length && array[i] < value) {
            newArray[i] = array[i];
            i++;
        }
        newArray[i] = value;
        while (i < array.length) {
            newArray[i + 1] = array[i];
            i++;
        }
        return newArray;
    }

    public static int[] deleteFromSortedArray(int[] array, int value) {
        int index = binarySearch(array, value);
        if (index == -1) {
            return array;
        }
        return deleteFromArray(array, index);
    }
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 0, 5, 6};
        System.out.println("Original Array: " + Arrays.toString(array));
        reverseArray(array);
        System.out.println("Reversed Array: " + Arrays.toString(array));
        System.out.println("Minimum Value: " + findMinValue(array));
        System.out.println("Second Max Value: " + findSecondMax(array));
        moveZeroesToEnd(array);
        System.out.println("After Moving Zeroes: " + Arrays.toString(array));
        array = resizeArray(array, 10);
        System.out.println("Resized Array: " + Arrays.toString(array));
        int[] numbers = {1, 2, 3, 5};
        System.out.println("Missing Number: " + findMissingNumber(numbers, 5));
        String str = "madam";
        System.out.println("Is Palindrome: " + isPalindrome(str));
        int[] sortedArray = {1, 3, 5, 7, 9};
        System.out.println("Original Sorted Array: " + Arrays.toString(sortedArray));
        sortedArray = insertInSortedArray(sortedArray, 6);
        System.out.println("After Insertion: " + Arrays.toString(sortedArray));
        sortedArray = deleteFromSortedArray(sortedArray, 3);
        System.out.println("After Deletion: " + Arrays.toString(sortedArray));
    }
}
